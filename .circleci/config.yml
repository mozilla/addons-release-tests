version: 2.1
orbs:
  win: circleci/windows@4.1.1
jobs:
  # run coverage devhub tests in a separate job in order to run in parallel with the other coverage runs
  coverage_devhub_tests:
    executor:
      name: win/default
      size: "large"
    working_directory:  ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox-nightly --pre --ignore-checksums -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Run coverage devhub tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 1 --reruns 2
          command: py -m pytest tests\coverage\test_coverage_devhub.py --driver Firefox --variables stage.json --html=coverage-devhub-tests-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: coverage-devhub-tests-results.html
  # run coverage frontend tests in a separate job in order to run in parallel with the other coverage runs
  coverage_frontend_tests:
    executor:
      name: win/default
      size: "large"
    working_directory: ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox-nightly --pre --ignore-checksums -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Run coverage frontend tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 1 --reruns 2
          command: py -m pytest tests\coverage\test_coverage_frontend.py --driver Firefox --variables stage.json --html=coverage-frontend-tests-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: coverage-frontend-tests-results.html
  # run collections tests in a separate serial job to make serial workflows more granular
  collections_serial_tests:
    executor:
      name: win/default
      size: "large"
    working_directory:  ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox-nightly --pre --ignore-checksums -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Install Typeguard
          command: pip install --upgrade typeguard
      - run:
          name: Run collections serial tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 1 --reruns 2
          command: py -m pytest tests\frontend\test_collections.py --driver Firefox --variables stage.json --html=collections-test-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: collections-test-results.html

  # run ratings tests in a separate serial job to make serial workflows more granular
  ratings_serial_tests:
    executor:
      name: win/default
      size: "large"
    working_directory: ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox-nightly --pre --ignore-checksums -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Install Typeguard
          command: pip install --upgrade typeguard
      - run:
          name: Run ratings serial tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 1 --reruns 2
          command: py -m pytest tests\frontend\test_ratings.py -m "serial" --driver Firefox --variables stage.json --html=ratings-test-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: ratings-test-results.html

  # run user tests in a separate serial job to make serial workflows more granular
  user_serial_tests:
    executor:
      name: win/default
      size: "large"
    working_directory: ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox-nightly --pre --ignore-checksums -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Install Typeguard
          command: pip install --upgrade typeguard
      - run:
          name: Run user serial tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 1 --reruns 2
          command: py -m pytest tests\frontend\test_users.py -m "serial" --driver Firefox --variables stage.json --html=user-test-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: user-test-results.html

  # tests that do not require login; they include homepage, addon detail, search, addon landing pages, translations, install and other misc tests
  frontend_parallel_tests:
    executor:
      name: win/default
      size: "large"
    working_directory: ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox-nightly --pre --ignore-checksums -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Install Typeguard
          command: pip install --upgrade typeguard
      - run:
          name: Run frontend parallel tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 4 --reruns 2
          command: py -m pytest tests\frontend -m "not serial and not prod_only" --driver Firefox --variables translations.json --variables stage.json --html=frontend-parallel-test-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: frontend-parallel-test-results.html

  # tests that are covering the developer hub homepage
  devhub_parallel_tests:
    executor:
      name: win/default
      size: "large"
    working_directory: ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox-nightly --pre --ignore-checksums -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Install Typeguard
          command: pip install --upgrade typeguard
      - run:
          name: Run devhub parallel tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 4 --reruns 2
          command: py -m pytest tests\devhub -m "not serial and not prod_only" --driver Firefox --variables stage.json --html=devhub-parallel-test-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: devhub-parallel-test-results.html

  # tests covering addon submissions through DevHub
  addon_submissions_tests:
    executor:
      name: win/default
      size: "large"
    working_directory: ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox-nightly --pre --ignore-checksums -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Install Typeguard
          command: pip install --upgrade typeguard
      - run:
          name: Run addon submissions tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 1 --reruns 2
          command: py -m pytest tests\devhub_submissions\test_addon_submissions.py --driver Firefox --variables stage.json --html=submissions-test-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: submissions-test-results.html

  # parallel tests run on production after the AMO push
  sanity_parallel_tests:
    executor:
      name: win/default
      size: "large"
    working_directory: ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Sanity parallel tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 4 --reruns 2
          command: py -m pytest -m "prod_only or sanity and not serial" --driver Firefox --variables prod.json --html=sanity-parallel-test-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: sanity-parallel-test-results.html

  # serial tests run on production after the AMO push
  sanity_serial_tests:
    executor:
      name: win/default
      size: "large"
    working_directory: ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Sanity serial tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 1 --reruns 2
          command: py -m pytest -m "sanity and serial" --driver Firefox --variables prod.json --html=sanity-serial-test-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: sanity-serial-test-results.html

  # api addon submission tests covering uploads, edits, authors;
  api_submission_tests:
    executor:
      name: win/default
      size: "large"
    working_directory: ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Install Typeguard
          command: pip install --upgrade typeguard
      - run:
          name: API submission tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 1 --reruns 2
          command: py -m pytest tests\api_w --driver Firefox --variables stage.json --html=api_submission_tests.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: api_submission_tests.html

  # a set of frontend regression tests to be run on AMO -dev once per day (set as nightly tests)
  frontend_dev_parallel_tests:
    executor:
      name: win/default
      size: "large"
    working_directory: ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox-nightly --pre --ignore-checksums -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Run frontend parallel tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 4 --reruns 2
          command: py -m pytest tests\frontend -m "not serial and not prod_only" --driver Firefox --variables translations.json --variables dev.json --html=frontend-dev-parallel-test-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: frontend-dev-parallel-test-results.html

  # run the user profile tests for the AMO -dev regression suites
  user_dev_serial_tests:
    executor:
      name: win/default
      size: "large"
    working_directory: ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox-nightly --pre --ignore-checksums -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Run user serial tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 1 --reruns 2
          command: py -m pytest tests\frontend\test_users.py --driver Firefox --variables dev.json --html=user-dev-test-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: user-dev-test-results.html

# run collections tests in a separate serial job to make serial workflows more granular
  collections_dev_serial_tests:
    executor:
      name: win/default
      size: "large"
    working_directory:  ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox-nightly --pre --ignore-checksums -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Run collections serial tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 1 --reruns 2
          command: py -m pytest tests\frontend\test_collections.py --driver Firefox --variables dev.json --html=collections-dev-test-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: collections-dev-test-results.html

  # run ratings tests in a separate serial job to make serial workflows more granular
  ratings_dev_serial_tests:
    executor:
      name: win/default
      size: "large"
    working_directory: ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox-nightly --pre --ignore-checksums -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Run ratings serial tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 1 --reruns 2
          command: py -m pytest tests\frontend\test_ratings.py --driver Firefox --variables dev.json --html=ratings-dev-test-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: ratings-dev-test-results.html

 # tests that are covering the developer hub homepage on AMO -dev
  devhub_dev_parallel_tests:
    executor:
      name: win/default
      size: "large"
    working_directory: ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox-nightly --pre --ignore-checksums -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Run devhub parallel tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 4 --reruns 2
          command: py -m pytest tests\devhub -m "not serial and not prod_only" --driver Firefox --variables dev.json --html=devhub-dev-parallel-test-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: devhub-dev-parallel-test-results.html

  # tests covering addon submissions through DevHub from AMO dev
  addon_submissions_dev_tests:
    executor:
      name: win/default
      size: "large"
    working_directory: ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox-nightly --pre --ignore-checksums -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Run addon submissions tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 1 --reruns 2
          command: py -m pytest tests\devhub_submissions\test_addon_submissions.py --driver Firefox --variables dev.json --html=submissions-dev-test-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: submissions-dev-test-results.html

  # tests covering reviewer tools through DevHub from AMO dev
  reviewer_tools_tests:
    executor:
      name: win/default
      size: "large"
    working_directory: ~/addons-release-tests/
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: py -m pip install --upgrade pip --user
      - run:
          name: Install requirements
          command: py -m pip install --no-deps -r ./requirements.txt
      - run:
          name: Install geckodriver
          command: choco install selenium-gecko-driver -y
      - run:
          name: Install Firefox
          command: choco install firefox-nightly --pre --ignore-checksums -y
      - run:
          name: Install Setup Tools
          command: pip install setuptools
      - run:
          name: Reviewer Tools Tests
          environment:
            MOZ_HEADLESS: 1
            PYTEST_ADDOPTS: -n 1 --reruns 2
          command: py -m pytest tests\reviewer_tools\test_reviewer_tools_release.py --driver Firefox --variables stage.json --html=reviewer-tools-stage-test-results.html --self-contained-html
          no_output_timeout: 30m
      - store_artifacts:
          path: reviewer-tools-stage-test-results.html

workflows:
  commit_workflow:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - frontend_parallel_tests
      - user_serial_tests
      - collections_serial_tests
      - ratings_serial_tests
      - devhub_parallel_tests
      - addon_submissions_tests
      - api_submission_tests

  # scheduled in CircleCI Project settings to run each Wednesdays at 04:00 UTC
  scheduled_coverage_run:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "scheduled_coverage_run", << pipeline.schedule.name >> ]
    jobs:
      - coverage_devhub_tests
      - coverage_frontend_tests

  # scheduled in CircleCI project settings to run each Wednesdays at 08:00 UTC
  scheduled_reviewer_tools_run:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "scheduled_reviewer_tools_run", << pipeline.schedule.name >> ]
    jobs:
      - reviewer_tools_tests
        # scheduled in CircleCI Project settings to run each Wednesdays at 05:00 UTC
  scheduled_stage_release_run:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "scheduled_stage_release_run", << pipeline.schedule.name >> ]
    jobs:
      - collections_serial_tests
      - ratings_serial_tests
      - user_serial_tests
      - frontend_parallel_tests
      - devhub_parallel_tests
      - addon_submissions_tests
      - api_submission_tests
  # scheduled in CircleCI Project settings to start each Thursdays at 17:00 UTC
  scheduled_prod_sanity_run:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "scheduled_prod_sanity_run", << pipeline.schedule.name >> ]
    jobs:
      # this job needs to be Approved in the CircleCI app in order to trigger the next job runs
      # once all the push duty tasks have been completed by AMO ops
      - hold:
          type: approval
      - sanity_parallel_tests: # will run after the hold job is approved
          requires:
            - hold
      - sanity_serial_tests: # # will run after the hold job is approved
          requires:
            - hold
  # scheduled in CircleCI Project settings to run once a day
  scheduled_dev_regression_tests:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "scheduled_dev_regression_tests", << pipeline.schedule.name >> ]
    jobs:
      - frontend_dev_parallel_tests
      - user_dev_serial_tests
      - collections_dev_serial_tests
      - ratings_dev_serial_tests
      - devhub_dev_parallel_tests
      - addon_submissions_dev_tests
